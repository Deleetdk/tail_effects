{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(DT)\n\nshinyServer(function(input, output) {\n  \n  reac_data = reactive({\n    #make dataframe\n    d = data.frame(matrix(ncol = 3, nrow = 1000))\n    colnames(d) = c(\"A_den\", \"B_den\", \"x\")\n    #find lower x limit\n    lowest.group.mean = min(input$mean_A, input$mean_B)\n    which.lowest = which.min(c(input$mean_A, input$mean_B))\n    if (input$mean_A > input$mean_B) {\n      lowest.group.SD = input$sd_B\n    } else {\n      lowest.group.SD = input$sd_A\n    }\n    plot.lower.limit = min(lowest.group.mean - (lowest.group.SD * 3), input$threshold)\n    #find upper x limit\n    highest.group.mean = max(input$mean_A, input$mean_B)\n    which.highest = which.max(c(input$mean_A, input$mean_B))\n    if (input$mean_A > input$mean_B) {\n      highest.group.SD = input$sd_A\n    } else {\n      highest.group.SD = input$sd_B\n    }\n    plot.upper.limit = max(highest.group.mean + (highest.group.SD * 3), input$threshold)\n    #calculate x steps\n    d$x = seq(plot.lower.limit, plot.upper.limit, length.out = 1000)\n    #calculate densities\n    d$A.den = dnorm(d$x, mean = input$mean_A, sd = input$sd_A)\n    d$B.den = dnorm(d$x, mean = input$mean_B, sd = input$sd_B)\n    #return\n    return(d)\n  })\n\n  output$plot <- renderPlot({\n    #plot\n    ggplot(reac_data(), aes(x = x)) +\n      geom_line(aes(x = x, y = A.den), color = \"blue\") +\n      geom_line(aes(x = x, y = B.den), color = \"red\") +\n      geom_vline(xintercept = input$threshold, linetype = \"dashed\")\n  })\n  \n  output$table = renderDataTable({\n    t = data.frame(matrix(nrow = 4, ncol = 4))\n    colnames(t) = c(\"Blue Group\", \"Red group\", \"Ratio blue/red\", \"Percent blue\")\n    rownames(t) = c(\"Percent above threshold\",\n                   \"Percent below threshold\",\n                   \"Mean of population above\",\n                   \"Mean of population below\")\n    ## insert values\n    #percent above\n    t[1, 1] = (1 - pnorm(input$threshold, mean = input$mean_A, sd = input$sd_A)) * 100\n    t[1, 2] = (1 - pnorm(input$threshold, mean = input$mean_B, sd = input$sd_B)) * 100\n    #percent below\n    t[2, 1] = pnorm(input$threshold, mean = input$mean_A, sd = input$sd_A) * 100\n    t[2, 2] = pnorm(input$threshold, mean = input$mean_B, sd = input$sd_B) * 100\n    #ratio\n    t[1, 3] = t[1, 1] / t[1, 2]\n    t[2, 3] = t[2, 1] / t[2, 2]\n    ## means of subgroups\n    d = reac_data() #fetch data\n    d.above = d[d$x > input$threshold, ]\n    d.below = d[d$x < input$threshold, ]\n    #above\n    t[3, 1] = weighted.mean(d.above$x, d.above$A.den)\n    t[3, 2] = weighted.mean(d.above$x, d.above$B.den)\n    #below\n    t[4, 1] = weighted.mean(d.below$x, d.below$A.den)\n    t[4, 2] = weighted.mean(d.below$x, d.below$B.den)\n    #Percent blue\n    t[1, 4] = (t[1, 1] / (t[1, 1] + t[1, 2])) * 100\n    t[2, 4] = (t[2, 1] / (t[2, 1] + t[2, 2])) * 100\n    \n    #render and return\n    t = datatable(t, options = list(dom = 't'))\n    return(t)\n  })\n\n})\n",
    "created" : 1433614030388.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4213087700",
    "id" : "130EF3FA",
    "lastKnownWriteTime" : 1433621569,
    "path" : "Z:/Code/R/Shiny/tail_effects/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}